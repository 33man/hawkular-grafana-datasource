{"version":3,"sources":["../../src/datasource.js"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEa,kB,WAAA,kB;AAEX,8BAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C,WAA9C,EAA2D;AAAA;;AACzD,SAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,SAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,SAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,SAAK,MAAL,GAAc,iBAAiB,QAAjB,CAA0B,MAAxC;AACA,SAAK,KAAL,GAAa,iBAAiB,QAAjB,CAA0B,KAAvC;AACA,SAAK,CAAL,GAAS,EAAT;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACD;;;;0BAEK,O,EAAS;AAAA;;AACb,UAAI,WAAW,iBAAE,KAAF,CAAQ,QAAQ,OAAhB,EACZ,MADY,CACL;AAAA,eAAU,CAAC,OAAO,IAAlB;AAAA,OADK,EAEZ,MAFY,CAEL;AAAA,eAAU,OAAO,MAAP,KAAkB,eAA5B;AAAA,OAFK,EAGZ,GAHY,CAGR,kBAAU;;AAEb,YAAI,MAAM,EAAV;AACA,YAAI,YAAY,MAAK,gBAAL,CAAsB,OAAO,MAA7B,CAAhB;AACA,YAAI,IAAJ,CAAS,OAAO,IAAP,GAAc,GAAvB,EAJa,CAIgB;AAC7B,YAAI,IAAJ,CAAS,OAAO,IAAP,GAAc,MAAd,GAAuB,KAAhC,EALa,CAK2B;AACxC,YAAI,IAAJ,CAAS,OAAT;;AAEA,YAAI,MAAM,MAAK,GAAL,GAAW,GAAX,GAAiB,IAAI,IAAJ,CAAS,GAAT,CAA3B;;AAEA,eAAO,MAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,eAAK,GADkC;AAEvC,gBAAM;AACJ,iBAAK,SADD;AAEJ,mBAAO,QAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,EAFH;AAGJ,iBAAK,QAAQ,KAAR,CAAc,EAAd,CAAiB,OAAjB;AAHD,WAFiC;AAOvC,kBAAQ,MAP+B;AAQvC,mBAAS,MAAK,aAAL;AAR8B,SAAlC,EASJ,IATI,CASC,oBAAY;AAClB,iBAAO;AACL,mBAAO,OAAO,KADT;AAEL,oBAAQ,OAAO,MAFV;AAGL,sBAAU;AAHL,WAAP;AAKD,SAfM,CAAP;AAgBD,OA7BY,EA8BZ,KA9BY,EAAf;;AAgCA,UAAI,SAAS,MAAT,IAAmB,CAAvB,EAA0B;AACxB,eAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,aAAO,KAAK,CAAL,CAAO,GAAP,CAAW,QAAX,EAAqB,IAArB,CAA0B,yBAAiB;AAChD,YAAI,SAAS,iBAAE,GAAF,CAAM,aAAN,EAAqB,UAAC,YAAD,EAAkB;AAClD,iBAAO;AACL,mBAAO,aAAa,KADf;AAEL,oBAAQ,aAAa,MAFhB;AAGL;AACA,wBAAY,GAAG,MAAH,CAAU,KAAV,CAAgB,EAAhB,EAAoB,aAAa,QAAb,CAAsB,IAAtB,CAA2B,GAA3B,CAA+B;AAAA,qBAAK,EAAE,IAAP;AAAA,aAA/B,CAApB,EACT,GADS,CACL;AAAA,qBAAS,CAAC,MAAM,KAAP,EAAc,MAAM,SAApB,CAAT;AAAA,aADK;AAJP,WAAP;AAOD,SARY,CAAb;AASA,eAAO,EAAC,MAAM,MAAP,EAAP;AACD,OAXM,CAAP;AAYD;;;oCAEe;AACd,UAAI,UAAU;AACZ,wBAAgB,kBADJ;AAEZ,2BAAmB,KAAK;AAFZ,OAAd;AAIA,UAAI,OAAO,KAAK,KAAZ,KAAsB,QAAtB,IAAkC,KAAK,KAAL,CAAW,MAAX,GAAoB,CAA1D,EAA6D;AAC3D,gBAAQ,aAAR,GAAwB,YAAY,KAAK,KAAzC;AACD;AACD,aAAO,OAAP;AACD;;;qCAEgB;AACf,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,SADuB;AAEvC,gBAAQ;AAF+B,OAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,YAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEe,O,EAAS;AACvB,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,cADuB;AAEvC,gBAAQ,MAF+B;AAGvC,cAAM;AAHiC,OAAlC,EAIJ,IAJI,CAIC,kBAAU;AAChB,eAAO,OAAO,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEe,O,EAAS;AACvB,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,UADuB;AAEvC,gBAAQ,EAAC,MAAM,QAAQ,IAAf,EAF+B;AAGvC,gBAAQ,KAH+B;AAIvC,iBAAS,KAAK,aAAL;AAJ8B,OAAlC,EAKJ,IALI,CAKC,kBAAU;AAChB,eAAO,iBAAE,GAAF,CAAM,OAAO,IAAb,EAAmB,kBAAU;AAClC,iBAAO,EAAC,MAAM,OAAO,EAAd,EAAkB,OAAO,OAAO,EAAhC,EAAP;AACD,SAFM,CAAP;AAGD,OATM,CAAP;AAUD;;;qCAEgB,M,EAAQ;AACvB,UAAI,SAAS,KAAK,WAAL,CAAiB,OAAjB,CAAyB,MAAzB,EAAiC,KAAK,WAAL,CAAiB,SAAlD,CAAb;AACA;AACA,UAAI,OAAO,UAAP,CAAkB,GAAlB,CAAJ,EAA4B;AACxB,eAAO,OAAO,SAAP,CAAiB,CAAjB,EAAoB,OAAO,MAAP,GAAc,CAAlC,EAAqC,KAArC,CAA2C,GAA3C,CAAP;AACH;AACD,aAAO,CAAC,MAAD,CAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class HawkularDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.token = instanceSettings.jsonData.token;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var promises = _.chain(options.targets)\n      .filter(target => !target.hide)\n      .filter(target => target.target !== 'select metric')\n      .map(target => {\n\n        var uri = [];\n        var metricIds = this.resolveVariables(target.target);\n        uri.push(target.type + 's'); // gauges or counters\n        uri.push(target.rate ? 'rate' : 'raw'); // raw or rate\n        uri.push('query');\n\n        var url = this.url + '/' + uri.join('/');\n\n        return this.backendSrv.datasourceRequest({\n          url: url,\n          data: {\n            ids: metricIds,\n            start: options.range.from.valueOf(),\n            end: options.range.to.valueOf()\n          },\n          method: 'POST',\n          headers: this.createHeaders()\n        }).then(response => {\n          return {\n            refId: target.refId,\n            target: target.target,\n            response: response\n          };\n        });\n      })\n      .value();\n\n    if (promises.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.q.all(promises).then(richResponses => {\n      var result = _.map(richResponses, (richResponse) => {\n        return {\n          refId: richResponse.refId,\n          target: richResponse.target,\n          // The javascript's flatMap\n          datapoints: [].concat.apply([], richResponse.response.data.map(d => d.data))\n            .map(point => [point.value, point.timestamp])\n        };\n      });\n      return {data: result};\n    });\n  }\n\n  createHeaders() {\n    var headers = {\n      'Content-Type': 'application/json',\n      'Hawkular-Tenant': this.tenant\n    };\n    if (typeof this.token === 'string' && this.token.length > 0) {\n      headers.Authorization = 'Bearer ' + this.token;\n    }\n    return headers;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: options\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics',\n      params: {type: options.type},\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  resolveVariables(target) {\n    var result = this.templateSrv.replace(target, this.templateSrv.variables);\n    // result might be in like \"{id1,id2,id3}\" (as string)\n    if (result.startsWith('{')) {\n        return result.substring(1, result.length-1).split(',');\n    }\n    return [result];\n  }\n}\n"]}