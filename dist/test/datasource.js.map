{
  "version": 3,
  "sources": [
    "../../src/datasource.js"
  ],
  "names": [],
  "mappings": ";;;;;;;;;AAAA;;;;;;;;IAEa,iB,WAAA,iB;AAEX,6BAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;AAAA;;AAC5C,SAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,SAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,SAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,SAAK,MAAL,GAAc,iBAAiB,QAAjB,CAA0B,MAAxC;AACA,SAAK,CAAL,GAAS,EAAT;AACA,SAAK,UAAL,GAAkB,UAAlB;AACD;;;;0BAEK,O,EAAS;AACb,cAAQ,GAAR,CAAY,OAAZ;AACA,cAAQ,GAAR,CAAY,OAAZ;AACA,UAAI,QAAQ,KAAK,oBAAL,CAA0B,OAA1B,CAAZ;;AAEA,UAAI,MAAM,OAAN,CAAc,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,eAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAZ,CAAP;AACD;;AAED,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,QADuB;AAEvC,cAAM,KAFiC;AAGvC,gBAAQ,MAH+B;AAIvC,iBAAS,EAAE,gBAAgB,kBAAlB,EAAsC,mBAAmB,KAAK,MAA9D;AAJ8B,OAAlC,CAAP;AAMD;;;qCAEgB;AACf,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,SADuB;AAEvC,gBAAQ;AAF+B,OAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,YAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,iBAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACD;AACF,OAPM,CAAP;AAQD;;;oCAEe,O,EAAS;AACvB,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,cADuB;AAEvC,gBAAQ,MAF+B;AAGvC,cAAM;AAHiC,OAAlC,EAIJ,IAJI,CAIC,kBAAU;AAChB,eAAO,OAAO,IAAd;AACD,OANM,CAAP;AAOD;;;oCAEe,O,EAAS;AACvB,aAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,aAAK,KAAK,GAAL,GAAW,UADuB;AAEvC,gBAAQ,EAAC,MAAM,QAAQ,IAAf,EAF+B;AAGvC,gBAAQ,KAH+B;AAIvC,iBAAS,EAAC,gBAAgB,kBAAjB,EAAqC,mBAAmB,KAAK,MAA7D;AAJ8B,OAAlC,EAKJ,IALI,CAKC,kBAAU;AAChB,eAAO,iBAAE,GAAF,CAAM,OAAO,IAAb,EAAmB,kBAAU;AAClC,iBAAO,EAAC,MAAM,OAAO,EAAd,EAAkB,OAAO,OAAO,EAAhC,EAAP;AACD,SAFM,CAAP;AAGD,OATM,CAAP;AAUD;;;yCAEoB,O,EAAS;;AAE5B,cAAQ,OAAR,GAAkB,iBAAE,MAAF,CAAS,QAAQ,OAAjB,EAA0B,kBAAU;AACpD,eAAO,OAAO,MAAP,KAAkB,eAAzB;AACD,OAFiB,CAAlB;;AAIA,aAAO,OAAP;AACD",
  "file": "datasource.js",
  "sourcesContent": [
    "import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  query(options) {\n    console.log('query');\n    console.log(options);\n    var query = this.buildQueryParameters(options);\n\n    if (query.targets.length <= 0) {\n      return this.q.when([]);\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json', 'Hawkular-Tenant': this.tenant }\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: options\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics',\n      params: {type: options.type},\n      method: 'GET',\n      headers: {'Content-Type': 'application/json', 'Hawkular-Tenant': this.tenant}\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    return options;\n  }\n}\n"
  ]
}