{"version":3,"sources":["../src/queryProcessor.js"],"names":[],"mappings":"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","file":"queryProcessor.js","sourcesContent":["export class QueryProcessor {\n\n  constructor(q, backendSrv, variables, capabilities, url, baseHeaders) {\n    this.q = q;\n    this.backendSrv = backendSrv;\n    this.variables = variables;\n    this.capabilities = capabilities;\n    this.url = url;\n    this.baseHeaders = baseHeaders;\n  }\n\n  run(target, options) {\n    return this.capabilities.then(caps => {\n      if (target.queryBy === 'ids') {\n        let metricIds = this.variables.resolve(target.target, options);\n        if (caps.QUERY_POST_ENDPOINTS) {\n          return this.rawQuery(target, options.range, metricIds);\n        } else {\n          return this.rawQueryLegacy(target, options.range, metricIds);\n        }\n      } else {\n        if (target.tags.length === 0) {\n          return this.q.when([]);\n        }\n        let strTags = this.hawkularFormatTags(target.tags, options);\n        return this.rawQueryByTags(target, options.range, strTags);\n      }\n    });\n  }\n\n  hawkularFormatTags(tags, options) {\n    return tags.map(tag => {\n      var value;\n      if (tag.value === ' *') {\n        // '*' character get a special treatment in grafana so we had to use ' *' instead\n        value = '*';\n      } else {\n        value = this.variables.resolve(tag.value, options).join('|');\n      }\n      return tag.name + ':' + value;\n    }).join(',');\n  }\n\n  rawQuery(target, range, metricIds) {\n    let uri = [\n      target.type + 's',            // gauges or counters\n      target.rate ? 'rate' : 'raw', // raw or rate\n      'query'\n    ];\n    let url = this.url + '/' + uri.join('/');\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: {\n        ids: metricIds,\n        start: range.from.valueOf(),\n        end: range.to.valueOf(),\n        order: 'ASC'\n      },\n      method: 'POST',\n      headers: this.baseHeaders\n    }).then(response => this.processRawResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  rawQueryLegacy(target, range, metricIds) {\n    return this.q.all(metricIds.map(metric => {\n      let uri = [\n        target.type + 's',            // gauges or counters\n        encodeURIComponent(metric).replace('+', '%20'), // metric name\n        'data'];\n      let url = this.url + '/' + uri.join('/');\n\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        params: {\n          start: range.from.valueOf(),\n          end: range.to.valueOf()\n        },\n        method: 'GET',\n        headers: this.baseHeaders\n      }).then(response => this.processRawResponseLegacy(target, metric, response.status == 200 ? response.data : []));\n    }));\n  }\n\n  rawQueryByTags(target, range, tags) {\n    let uri = [\n      target.type + 's',            // gauges or counters\n      target.rate ? 'rate' : 'raw', // raw or rate\n      'query'\n    ];\n    let url = this.url + '/' + uri.join('/');\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: {\n        tags: tags,\n        start: range.from.valueOf(),\n        end: range.to.valueOf(),\n        order: 'ASC'\n      },\n      method: 'POST',\n      headers: this.baseHeaders\n    }).then(response => this.processRawResponse(target, response.status == 200 ? response.data : []));\n  }\n\n  processRawResponse(target, data) {\n    return data.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: timeSerie.id,\n        datapoints: timeSerie.data.map(point => [point.value, point.timestamp])\n      };\n    });\n  }\n\n  processRawResponseLegacy(target, metric, data) {\n    var datapoints;\n    if (!target.rate) {\n      datapoints = _.map(data, point => [point.value, point.timestamp]);\n    } else {\n      var sortedData = data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n      datapoints = _.chain(sortedData)\n        .zip(sortedData.slice(1))\n        .filter(pair => {\n          return pair[1] // Exclude the last pair\n            && (target.type == 'gauge' || pair[0].value <= pair[1].value); // Exclude counter resets\n        })\n        .map(pair => {\n          var point1 = pair[0], point2 = pair[1];\n          var timestamp = point2.timestamp;\n          var value_diff = point2.value - point1.value;\n          var time_diff = point2.timestamp - point1.timestamp;\n          var rate = 60000 * value_diff / time_diff;\n          return [rate, timestamp];\n        })\n        .value();\n    }\n    return {\n      refId: target.refId,\n      target: metric,\n      datapoints: datapoints\n    };\n  }\n}\n"]}