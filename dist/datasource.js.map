{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {Variables} from './variables';\nimport {Capabilities} from './capabilities';\nimport {QueryProcessor} from './queryProcessor';\n\nexport class HawkularDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.token = instanceSettings.jsonData.token;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    let variables = new Variables(templateSrv);\n    let capabilities = this.queryVersion()\n      .then(version => new Capabilities(version));\n    this.queryProcessor = new QueryProcessor($q, backendSrv, variables, capabilities, this.url, this.createHeaders());\n  }\n\n  query(options) {\n    let validTargets = options.targets\n      .filter(target => !target.hide)\n      .filter(target => target.target !== 'select metric');\n\n    if (validTargets.length === 0) {\n      return this.q.when({data: []});\n    }\n\n    let promises = validTargets.map(target => {\n      return this.queryProcessor.run(target, options);\n    });\n\n    return this.q.all(promises).then(responses => {\n      let flatten = [].concat.apply([], responses);\n      return {data: flatten};\n    });\n  }\n\n  getDataLegacy(target, start, end) {\n    var uri = [];\n    uri.push(target.type + 's'); // gauges or counters\n    uri.push(encodeURIComponent(target.target).replace('+', '%20')); // metric name\n    uri.push('data');\n\n    var url = this.url + '/' + uri.join('/');\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      params: {\n        start: start,\n        end: end\n      },\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(response => {\n      var datapoints;\n      if (!target.rate) {\n        datapoints = _.map(response.data, point => [point.value, point.timestamp]);\n      } else {\n        var sortedData = response.data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n        datapoints = _.chain(sortedData)\n          .zip(sortedData.slice(1))\n          .filter(pair => {\n            return pair[1] // Exclude the last pair\n              && (target.type == 'gauge' || pair[0].value <= pair[1].value); // Exclude counter resets\n          })\n          .map(pair => {\n            var point1 = pair[0], point2 = pair[1];\n            var timestamp = point2.timestamp;\n            var value_diff = point2.value - point1.value;\n            var time_diff = point2.timestamp - point1.timestamp;\n            var rate = 60000 * value_diff / time_diff;\n            return [rate, timestamp];\n          })\n          .value();\n      }\n      return {\n        refId: target.refId,\n        target: target.target,\n        datapoints: datapoints\n      };\n    });\n  }\n\n  createHeaders() {\n    var headers = {\n      'Content-Type': 'application/json',\n      'Hawkular-Tenant': this.tenant\n    };\n    if (typeof this.token === 'string' && this.token.length > 0) {\n      headers.Authorization = 'Bearer ' + this.token;\n    }\n    return headers;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: options\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  suggestQueries(target) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics?type=' + target.type,\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  suggestTags(type, key) {\n    if (!key) {\n      // Need at least some characters typed in order to suggest something\n      return this.q.when([]);\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/' + type + 's/tags/' + key + ':*',\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      if (result.data.hasOwnProperty(key)) {\n        return [' *'].concat(result.data[key]).map(value => {\n          return {text: value, value: value};\n        });\n      }\n      return [];\n    });\n  }\n\n  metricFindQuery(query) {\n    var params = \"\";\n    if (query !== undefined) {\n      if (query.startsWith(\"tags/\")) {\n        return this.findTags(query.substr(5).trim());\n      }\n      if (query.startsWith(\"?\")) {\n        params = query;\n      } else {\n        params = \"?\" + query;\n      }\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics' + params,\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  findTags(pattern) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics/tags/' + pattern,\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      var flatTags = [];\n      if (result.data) {\n        var data = result.data;\n        for (var property in data) {\n          if (data.hasOwnProperty(property)) {\n            flatTags = flatTags.concat(data[property]);\n          }\n        }\n      }\n      return flatTags.map(tag => {\n        return {text: tag, value: tag};\n      });\n    });\n  }\n\n  queryVersion() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    }).then(response => response.data['Implementation-Version'])\n    .catch(response => \"Unknown\");\n  }\n}\n"]}