{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {Aggregations} from './aggregations';\n\nexport class HawkularDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.token = instanceSettings.jsonData.token;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.aggregations = new Aggregations();\n  }\n\n  query(options) {\n    let validTargets = options.targets\n      .filter(target => !target.hide)\n      .filter(target => target.target !== 'select metric');\n\n    if (validTargets.length === 0) {\n      return this.q.when({data: []});\n    }\n\n    let promises = validTargets.map(target =>\n      this.queryOnTarget(target, options)\n        .then(response => this.processResponse(target, response)));\n\n    return this.q.all(promises).then(responses => {\n      let flatten = [].concat.apply([], responses);\n      return {data: flatten};\n    });\n  }\n\n  queryOnTarget(target, options) {\n    let uri = [\n      target.type + 's',            // gauges or counters\n      target.rate ? 'rate' : 'raw', // raw or rate\n      'query'\n    ];\n    let url = this.url + '/' + uri.join('/');\n    let metricIds = this.resolveVariables(target.target, options.scopedVars || this.templateSrv.variables);\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      data: {\n        ids: metricIds,\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf()\n      },\n      method: 'POST',\n      headers: this.createHeaders()\n    }).then(response => {\n      return {\n        target: metricIds[0],\n        hawkularJson: response.status == 200 ? response.data : []\n      };\n    });\n  }\n\n  processResponse(target, response) {\n    var hawkularJson;\n    if (target.reduce === 'sum') {\n      hawkularJson = this.aggregations.on(response.hawkularJson, this.aggregations.sum);\n    } else if (target.reduce === 'average') {\n      hawkularJson = this.aggregations.on(response.hawkularJson, this.aggregations.average);\n    } else if (target.reduce === 'min') {\n      hawkularJson = this.aggregations.on(response.hawkularJson, this.aggregations.min);\n    } else if (target.reduce === 'max') {\n      hawkularJson = this.aggregations.on(response.hawkularJson, this.aggregations.max);\n    } else {\n      hawkularJson = response.hawkularJson;\n    }\n    let multipleSeries = hawkularJson.length > 1;\n    return hawkularJson.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: multipleSeries ? timeSerie.id : response.target,\n        datapoints: timeSerie.data.map(point => [point.value, point.timestamp])\n      };\n    });\n  }\n\n  createHeaders() {\n    var headers = {\n      'Content-Type': 'application/json',\n      'Hawkular-Tenant': this.tenant\n    };\n    if (typeof this.token === 'string' && this.token.length > 0) {\n      headers.Authorization = 'Bearer ' + this.token;\n    }\n    return headers;\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: options\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics',\n      params: {type: options.type},\n      method: 'GET',\n      headers: this.createHeaders()\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  resolveVariables(target, scopedVars) {\n    let variables = target.match(/\\$\\w+/g);\n    var resolved = [target];\n    if (variables) {\n      variables.forEach(v => {\n        let values = this.getVarValues(v, scopedVars);\n        let newResolved = [];\n        values.forEach(val => {\n          resolved.forEach(target => {\n            newResolved.push(target.replace(v, val));\n          });\n        });\n        resolved = newResolved;\n      });\n    }\n    return resolved;\n  }\n\n  getVarValues(variable, scopedVars) {\n    let values = this.templateSrv.replace(variable, scopedVars);\n    // result might be in like \"{id1,id2,id3}\" (as string)\n    if (values.startsWith('{')) {\n        return values.substring(1, values.length-1).split(',');\n    }\n    return [values];\n  }\n}\n"]}