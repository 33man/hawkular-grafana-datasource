{"version":3,"sources":["../src/datasource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAO,O;;;;;;;;;;;;;;;;;;;;;mCAEM,iB;AAEX,mCAAY,gBAAZ,EAA8B,EAA9B,EAAkC,UAAlC,EAA8C;AAAA;;AAC5C,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,GAAL,GAAW,iBAAiB,GAA5B;AACA,eAAK,IAAL,GAAY,iBAAiB,IAA7B;AACA,eAAK,MAAL,GAAc,iBAAiB,QAAjB,CAA0B,MAAxC;AACA,eAAK,CAAL,GAAS,EAAT;AACA,eAAK,UAAL,GAAkB,UAAlB;AACD;;;;gCAEK,O,EAAS;AAAA;;AACb,gBAAI,WAAW,EAAE,KAAF,CAAQ,QAAQ,OAAhB,EACZ,MADY,CACL;AAAA,qBAAU,CAAC,OAAO,IAAlB;AAAA,aADK,EAEZ,MAFY,CAEL;AAAA,qBAAU,OAAO,MAAP,KAAkB,eAA5B;AAAA,aAFK,EAGZ,GAHY,CAGR,kBAAU;;AAEb,kBAAI,MAAM,EAAV;AACA,kBAAI,IAAJ,CAAS,OAAO,IAAP,GAAc,GAAvB,E;AACA,kBAAI,IAAJ,CAAS,OAAO,MAAhB,E;AACA,kBAAI,IAAJ,CAAS,OAAO,IAAP,GAAc,MAAd,GAAuB,KAAhC,E;;AAEA,kBAAI,MAAM,MAAK,GAAL,GAAW,GAAX,GAAiB,IAAI,IAAJ,CAAS,GAAT,CAA3B;;AAEA,qBAAO,MAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,qBAAK,GADkC;AAEvC,wBAAQ,EAAC,OAAO,QAAQ,KAAR,CAAc,IAAd,CAAmB,OAAnB,EAAR,EAAsC,KAAK,QAAQ,KAAR,CAAc,EAAd,CAAiB,OAAjB,EAA3C,EAF+B;AAGvC,wBAAQ,KAH+B;AAIvC,yBAAS,EAAC,gBAAgB,kBAAjB,EAAqC,mBAAmB,MAAK,MAA7D;;AAJ8B,eAAlC,CAAP;AAOD,aAnBY,EAoBZ,KApBY,EAAf;;AAsBA,gBAAI,SAAS,MAAT,IAAmB,CAAvB,EAA0B;AACxB,qBAAO,KAAK,CAAL,CAAO,IAAP,CAAY,EAAC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,mBAAO,KAAK,CAAL,CAAO,GAAP,CAAW,QAAX,EAAqB,IAArB,CAA0B,qBAAa;AAC5C,kBAAI,SAAS,EAAE,GAAF,CAAM,SAAN,EAAiB,UAAC,QAAD,EAAW,KAAX,EAAqB;AACjD,oBAAI,aAAa,EAAE,GAAF,CAAM,SAAS,IAAf,EAAqB;AAAA,yBAAS,CAAC,MAAM,KAAP,EAAc,MAAM,SAApB,CAAT;AAAA,iBAArB,CAAjB;AACA,uBAAO;AACL,0BAAQ,QAAQ,OAAR,CAAgB,KAAhB,EAAuB,MAD1B;AAEL,8BAAY;AAFP,iBAAP;AAID,eANY,CAAb;AAOA,qBAAO,EAAC,MAAM,MAAP,EAAP;AACD,aATM,CAAP;AAUD;;;2CAEgB;AACf,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,SADuB;AAEvC,sBAAQ;AAF+B,aAAlC,EAGJ,IAHI,CAGC,oBAAY;AAClB,kBAAI,SAAS,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAE,QAAQ,SAAV,EAAqB,SAAS,wBAA9B,EAAwD,OAAO,SAA/D,EAAP;AACD;AACF,aAPM,CAAP;AAQD;;;0CAEe,O,EAAS;AACvB,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,cADuB;AAEvC,sBAAQ,MAF+B;AAGvC,oBAAM;AAHiC,aAAlC,EAIJ,IAJI,CAIC,kBAAU;AAChB,qBAAO,OAAO,IAAd;AACD,aANM,CAAP;AAOD;;;0CAEe,O,EAAS;AACvB,mBAAO,KAAK,UAAL,CAAgB,iBAAhB,CAAkC;AACvC,mBAAK,KAAK,GAAL,GAAW,UADuB;AAEvC,sBAAQ,EAAC,MAAM,QAAQ,IAAf,EAF+B;AAGvC,sBAAQ,KAH+B;AAIvC,uBAAS,EAAC,gBAAgB,kBAAjB,EAAqC,mBAAmB,KAAK,MAA7D;AAJ8B,aAAlC,EAKJ,IALI,CAKC,kBAAU;AAChB,qBAAO,EAAE,GAAF,CAAM,OAAO,IAAb,EAAmB,kBAAU;AAClC,uBAAO,EAAC,MAAM,OAAO,EAAd,EAAkB,OAAO,OAAO,EAAhC,EAAP;AACD,eAFM,CAAP;AAGD,aATM,CAAP;AAUD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  query(options) {\n    var promises = _.chain(options.targets)\n      .filter(target => !target.hide)\n      .filter(target => target.target !== 'select metric')\n      .map(target => {\n\n        var uri = [];\n        uri.push(target.type + 's'); // gauges or counter\n        uri.push(target.target); // metric name\n        uri.push(target.rate ? 'rate' : 'raw'); // raw or rate\n\n        var url = this.url + '/' + uri.join('/');\n\n        return this.backendSrv.datasourceRequest({\n          url: url,\n          params: {start: options.range.from.valueOf(), end: options.range.to.valueOf()},\n          method: 'GET',\n          headers: {'Content-Type': 'application/json', 'Hawkular-Tenant': this.tenant}\n\n        });\n      })\n      .value();\n\n    if (promises.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    return this.q.all(promises).then(responses => {\n      var result = _.map(responses, (response, index) => {\n        var datapoints = _.map(response.data, point => [point.value, point.timestamp]);\n        return {\n          target: options.targets[index].target,\n          datapoints: datapoints\n        };\n      });\n      return {data: result};\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: options\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics',\n      params: {type: options.type},\n      method: 'GET',\n      headers: {'Content-Type': 'application/json', 'Hawkular-Tenant': this.tenant}\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n}\n"]}